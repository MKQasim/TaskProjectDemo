//
//  KQLoginViewController.swift
//  TaskProjectDemo
//
//  Created by Apple on 10/30/19.
//  Copyright (c) 2019 Apple. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SkyFloatingLabelTextField
import IQKeyboardManagerSwift


protocol KQLoginDisplayLogic: class
{
    func displaySomething(viewModel: KQLogin.Api.ViewModel)
    func displayHome()
    func displaySkip()
    
}

class KQLoginViewController: UIViewController, KQLoginDisplayLogic
{
    var interactor: KQLoginBusinessLogic?
    var router: (NSObjectProtocol & KQLoginRoutingLogic & KQLoginDataPassing)?

    // MARK: Outlets

    // MARK: TextFields
    @IBOutlet weak var emailTextField: SkyFloatingLabelTextFieldWithIcon!
    @IBOutlet weak var passwordTextField: SkyFloatingLabelTextFieldWithIcon!
    // MARK: UIButtons

    @IBOutlet weak var loginBtn: UIButton!
    @IBOutlet weak var signUpBtn: UIButton!
    // MARK: UIImageView
    @IBOutlet weak var logoImageView: UIImageView!
    // MARK: middleView
    @IBOutlet weak var middleView: UIView!
    // MARK: UISwitch
    @IBOutlet weak var passwordSwitch: UISwitch!
    // MARK: Constraints
    @IBOutlet weak var passwordHeight: NSLayoutConstraint!
    @IBOutlet weak var logoCenterd: NSLayoutConstraint!
    // MARK: Bottom Register Label
    @IBOutlet weak var registerLbl: UILabel!
    @IBOutlet weak var logoHeight: NSLayoutConstraint!

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup
    private func setup()
    {
        let viewController = self
        let interactor = KQLoginInteractor()
        let presenter = KQLoginPresenter()
        let router = KQLoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: SetUpUI

    func setUpUI(){
        // MARK: TextField Delegate
        self.emailTextField.delegate = self
        self.passwordTextField.delegate = self
        // MARK: passwordSwitch Color
        passwordSwitch.onTintColor = AppTheme.AppTheme1.LoginScreen.LoginSwitch.onTintColor
        passwordSwitch.thumbTintColor = AppTheme.AppTheme1.LoginScreen.LoginSwitch.thumbColor
        // MARK: Animation Color
        for view in self.middleView.subviews {if (view is UISwitch) {}else{view.animShow()}}
        // MARK: navigationBar isHidden
        self.navigationController?.navigationBar.isHidden = true
        // MARK: tapGesture
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(self.dismissKeyboard (_:)))
        self.view.addGestureRecognizer(tapGesture)
        // MARK: textFieldSetup
        self.textFieldSetup(textField: emailTextField, image: UIImage(imageLiteralResourceName: "icon-email"), placHolder: "Email")
        self.textFieldSetup(textField: passwordTextField, image: UIImage(imageLiteralResourceName: "icon-password"), placHolder: "Password")
        // MARK: keyboardDistanceFromTextField
        IQKeyboardManager.shared.keyboardDistanceFromTextField = 70

        signUpBtn.titleLabel?.textColor = AppTheme.AppTheme1.LoginScreen.sighnUpEmailButton.textColor
        signUpBtn.titleLabel?.font = AppTheme.AppTheme1.LoginScreen.sighnUpEmailButton.titleFont
        registerLbl.font = AppTheme.AppTheme1.LoginScreen.registerBusinessLabel.titleFont
        registerLbl.textColor = AppTheme.AppTheme1.LoginScreen.registerBusinessLabel.textColor
    }

    // MARK: View lifecycle

    override func viewDidLoad()
    {
        super.viewDidLoad()
        self.setUpUI()
    }

    // MARK: View DismissKeyboard

    @objc func dismissKeyboard (_ sender: UITapGestureRecognizer) {
        emailTextField.resignFirstResponder()
        UIView.animate(withDuration: 1, delay: 0, options: [.curveEaseOut], animations: { [weak self] in
            self?.logoImageView.transform = CGAffineTransform(translationX: 0, y: 30)
            self?.logoImageView.alpha = 1
        }, completion: nil)
    }

    // MARK: ViewWillAppear

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(true)
        emailTextField.text = "kamqasim1@gmail.com"
        passwordTextField.text = "12345678"
    }

    // MARK: TextFieldSetUp

    func textFieldSetup(textField:SkyFloatingLabelTextFieldWithIcon,image : UIImage , placHolder : String){
        textField.tintColor = AppTheme.AppTheme1.LoginScreen.TextField.tintColor// the color of the blinking cursore
        textField.placeholderColor = AppTheme.AppTheme1.LoginScreen.TextField.placeHolderColor
        textField.textColor = AppTheme.AppTheme1.LoginScreen.TextField.textColor
        textField.iconType = .image
        textField.lineColor = AppTheme.AppTheme1.LoginScreen.TextField.passiveBorderColor
        textField.selectedTitleColor = AppTheme.AppTheme1.LoginScreen.TextField.activeTitleColor
        textField.placeholder = placHolder
        textField.titleColor = AppTheme.AppTheme1.LoginScreen.TextField.passsiveTitleColor
        textField.selectedLineColor = AppTheme.AppTheme1.LoginScreen.TextField.activeBorderColor
        textField.textAlignment = .left
        textField.iconImage = image
        textField.leftViewMode = .always
        textField.lineHeight = 1.0 // bottom line height in points
        textField.selectedLineHeight = 2.0
    }

    // MARK:  PasswordSwitch Action

    @IBAction func passwordSwitch(_ sender: Any) {
        if passwordSwitch.isOn{
            passwordSwitch.onTintColor = AppTheme.AppTheme1.LoginScreen.LoginSwitch.onTintColor
            passwordHeight.constant = 100
            passwordTextField.isHidden = false
        }else{
            passwordSwitch.onTintColor = AppTheme.AppTheme1.LoginScreen.LoginSwitch.offTintColor
            passwordHeight.constant = 70
            passwordTextField.isHidden = true
        }
        self.viewDidLayoutSubviews()
    }

    // MARK:  login Action

    @IBAction func loginAction(_ sender: Any) {
        doValidation()
    }

    // MARK:  SignUp Action

    @IBAction func signUpAction(_ sender: Any) {
        interactor?.loginAction()
    }

    // MARK:  Skip Action

    @IBAction func skipAction(_ sender: Any) {
        interactor?.loginAction()
    }

    // MARK: Do Validation

    func doValidation()
    {
        let request = KQLogin.Api.Request(email: emailTextField.text!, password: passwordTextField.text!)
        interactor?.loginRequest(request: request)
    }

    // MARK: Display On Controler

    func displaySkip() {
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
            // your code hereÂ§
            if let rout = self.router{
                print("Move to Home")
                rout.routeToHome(segue: nil)
            }
        }
    }
    // MARK: Display On Controler

    func displaySomething(viewModel: KQLogin.Api.ViewModel)
    {
       
        //nameTextField.text = viewModel.name
    }

    func displayHome() {

        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
            // your code here
            if let rout = self.router{
                print("Move to Home")
                rout.routeToHome(segue: nil)
            }
        }
    }
}

extension KQLoginViewController : UITextFieldDelegate{
    // MARK: TextField Delegate Functions

    func textFieldDidBeginEditing(_ textField: UITextField) {
        if textField == emailTextField{
            self.logoImageView.alpha = 0
            UIView.animate(withDuration: 0.5, delay: 0, options: [.curveEaseOut], animations: {
                self.logoImageView.transform = CGAffineTransform(translationX: 0, y: 30)
                self.logoHeight.constant = 91
                self.logoImageView.alpha = 1
            }, completion: nil)
        }else if textField == passwordTextField{
            self.logoImageView.alpha = 0
            UIView.animate(withDuration: 0.5, delay: 0, options: [.curveEaseOut], animations: {
                self.logoImageView.transform = CGAffineTransform(translationX: 0, y: 65)
                self.logoHeight.constant = 61
                self.logoImageView.alpha = 1
            }, completion: nil)
        }
    }

    func textFieldDidEndEditing(_ textField: UITextField) {

        UIView.animate(withDuration: 1, delay: 0, options: [.curveEaseOut], animations: {
            self.logoImageView.transform = CGAffineTransform(translationX: 0, y: 30)
            self.logoImageView.alpha = 1
        }, completion: nil)
        print("done click ")
    }
}

